{
  "flow_runs": [
    {
      "run_id": "03a9e5e5-c286-4a6b-96f1-51a5615f4a51_0",
      "status": "Completed",
      "error": null,
      "inputs": {
        "input_file": "./_data_in/apache.log"
      },
      "output": {
        "KQL": "datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]"
      },
      "metrics": null,
      "request": null,
      "parent_run_id": "03a9e5e5-c286-4a6b-96f1-51a5615f4a51",
      "root_run_id": "03a9e5e5-c286-4a6b-96f1-51a5615f4a51",
      "source_run_id": null,
      "flow_id": "default_flow_id",
      "start_time": "2024-05-01T13:19:48.370792Z",
      "end_time": "2024-05-01T13:20:51.159742Z",
      "index": 0,
      "api_calls": [
        {
          "name": "flow",
          "node_name": "flow",
          "type": "Flow",
          "start_time": 1714569588.370792,
          "end_time": 1714569651.159742,
          "children": [
            {
              "name": "kql_generator_tool",
              "type": "Function",
              "inputs": {
                "input": "./_data_in/apache.log"
              },
              "output": "datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]",
              "start_time": 1714569588.373222,
              "end_time": 1714569651.157547,
              "error": null,
              "children": [
                {
                  "name": "openai_chat_async",
                  "type": "LLM",
                  "inputs": {
                    "model": "gpt-4",
                    "frequency_penalty": 0.0,
                    "logit_bias": {},
                    "max_tokens": 1024,
                    "n": 1,
                    "presence_penalty": 0.0,
                    "stream": false,
                    "temperature": 0.0,
                    "top_p": 0.0,
                    "messages": [
                      {
                        "role": "user",
                        "content": "Create an XML plan step by step, to satisfy the goal given, with the available functions.\n\n[AVAILABLE FUNCTIONS]\n\nFileSystem-ReadFileHead:\n  description: Reads the first lines of a file\n  inputs:\n    - filename: The filename of the file to read\n\nextraction-extract_fields:\n  description: Create KQL that demonstrates extracting fields from a line in a logfile\n  inputs:\n    - input: \n\n[END AVAILABLE FUNCTIONS]\n\nTo create a plan, follow these steps:\n0. The plan should be as short as possible.\n1. From a <goal> create a <plan> as a series of <functions>.\n2. A plan has 'INPUT' available in context variables by default.\n3. Before using any function in a plan, check that it is present in the [AVAILABLE FUNCTIONS] list. If it is not, do not use it.\n4. Only use functions that are required for the given goal.\n5. Append an \"END\" XML comment at the end of the plan after the final closing </plan> tag.\n6. Always output valid XML that can be parsed by an XML parser.\n7. If a plan cannot be created with the [AVAILABLE FUNCTIONS], return <plan />.\n\nAll plans take the form of:\n<plan>\n    <!-- ... reason for taking step ... -->\n    <function.{FullyQualifiedFunctionName} ... />\n    <!-- ... reason for taking step ... -->\n    <function.{FullyQualifiedFunctionName} ... />\n    <!-- ... reason for taking step ... -->\n    <function.{FullyQualifiedFunctionName} ... />\n    (... etc ...)\n</plan>\n<!-- END -->\n\nTo call a function, follow these steps:\n1. A function has one or more named parameters and a single 'output' which are all strings. Parameter values should be xml escaped.\n2. To save an 'output' from a <function>, to pass into a future <function>, use <function.{FullyQualifiedFunctionName} ... setContextVariable=\"<UNIQUE_VARIABLE_KEY>\"/>\n3. To save an 'output' from a <function>, to return as part of a plan result, use <function.{FullyQualifiedFunctionName} ... appendToResult=\"RESULT__<UNIQUE_RESULT_KEY>\"/>\n4. Use a '$' to reference a context variable in a parameter, e.g. when `INPUT='world'` the parameter 'Hello $INPUT' will evaluate to `Hello world`.\n5. Functions do not have access to the context variables of other functions. Do not attempt to use context variables as arrays or objects. Instead, use available functions to extract specific elements or properties from context variables.\n\nDO NOT DO THIS, THE PARAMETER VALUE IS NOT XML ESCAPED:\n<function.Plugin-Name4 input=\"$SOME_PREVIOUS_OUTPUT\" parameter_name=\"some value with a <!-- 'comment' in it-->\"/>\n\nDO NOT DO THIS, THE PARAMETER VALUE IS ATTEMPTING TO USE A CONTEXT VARIABLE AS AN ARRAY/OBJECT:\n<function.Plugin-CallFunction input=\"$OTHER_OUTPUT[1]\"/>\n\nDO NOT DO THIS, THE FUNCTION NAME IS NOT A FULLY QUALIFIED FUNCTION NAME:\n<function.CallFunction input=\"world\"/>\n\nHere is a valid example of how to call a function \"_plugin-Function_Name\" with a single input and save its output:\n<function._plugin-Function_Name input=\"this is my input\" setContextVariable=\"SOME_KEY\"/>\n\nHere is a valid example of how to call a function \"Plugin-FunctionName2\" with a single input and return its output as part of the plan result:\n<function.Plugin-FunctionName2 input=\"Hello $INPUT\" appendToResult=\"RESULT__FINAL_ANSWER\"/>\n\nHere is a valid example of how to call a function \"Name3\" with multiple inputs:\n<function.Plugin-Name3 input=\"$SOME_PREVIOUS_OUTPUT\" parameter_name=\"some value with a &lt;!-- &apos;comment&apos; in it--&gt;\"/>\n\nBegin!\n\n<goal>Use the available plugins to: 1 - read the beginning of the log file and 2 - write a KQL query that extracts fields from the log: ./_data_in/apache.log</goal>"
                      }
                    ]
                  },
                  "output": {
                    "id": "chatcmpl-9K4A96Se6PBtcPOtsY9PJfACynH5o",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "logprobs": null,
                        "message": {
                          "content": "<plan>\n    <!-- First, we need to read the beginning of the log file -->\n    <function.FileSystem-ReadFileHead filename=\"./_data_in/apache.log\" setContextVariable=\"LOG_HEAD\"/>\n    <!-- Then, we use the extracted log head to create a KQL query that extracts fields from the log -->\n    <function.extraction-extract_fields input=\"$LOG_HEAD\" appendToResult=\"RESULT__KQL_QUERY\"/>\n</plan>\n<!-- END -->",
                          "role": "assistant",
                          "function_call": null,
                          "tool_calls": null
                        }
                      }
                    ],
                    "created": 1714569589,
                    "model": "gpt-4",
                    "object": "chat.completion",
                    "system_fingerprint": null,
                    "usage": {
                      "completion_tokens": 93,
                      "prompt_tokens": 857,
                      "total_tokens": 950
                    }
                  },
                  "start_time": 1714569588.452641,
                  "end_time": 1714569601.99684,
                  "error": null,
                  "children": [],
                  "node_name": null,
                  "parent_id": "3583cb2c-78c7-4615-9718-8ae6edc9fcc3",
                  "id": "808eed75-27f4-4399-9f1c-fc21a14f298c",
                  "function": "openai.resources.chat.completions.AsyncCompletions.create",
                  "system_metrics": {
                    "completion_tokens": 93,
                    "prompt_tokens": 857,
                    "total_tokens": 950
                  }
                },
                {
                  "name": "openai_chat_async",
                  "type": "LLM",
                  "inputs": {
                    "model": "gpt-4",
                    "frequency_penalty": 0.0,
                    "logit_bias": {},
                    "max_tokens": 2048,
                    "n": 1,
                    "presence_penalty": 0.0,
                    "stream": false,
                    "temperature": 0.0,
                    "top_p": 0.0,
                    "messages": [
                      {
                        "role": "user",
                        "content": "Write a Kusto Query Language (KQL) query that extracts all the fields from the loglines below. \n\nFields could be:\n- IP Address e.g. 127.0.2.200\n- Date e.g. 'Jun 14 15:16:02'\n- Message e.g. 'authentication failure' or 'check pass; user unknown'\n- Response code e.g. 200 or 404\n\n\nRelevant KQL functions syntax:\n- Joining strings (concatenation): strcat(argument1, argument2 [, argument3 ... ])\n- Datetime parsing: todatetime(value)\n- Splitting strings: split(source, delimiter [, requestedIndex])\n\nDo NOT:\n- Name columns any of the following 'date', 'time'\n\n\nExample:\n\n[INPUT]\n127.0.0.1 200 GET /index.htm\n127.0.0.1 200 GET /index.htm\n127.0.0.1 200 GET /index.htm\n127.0.0.1 200 GET /index.htm\n[END INPUT]\n\n[KQL]\ndatatable (message:string) [\n    '127.0.0.1 200 GET /index.htm',\n    '127.0.0.1 200 GET /index.htm',\n    '127.0.0.1 200 GET /index.htm',\n    '127.0.0.1 200 GET /index.htm',\n]\n| project \n    ip = split(message,\" \")[0],\n    httpResultCode = split(message,\" \")[1],\n    httpMethod = split(message,\" \")[2] ,\n    doc = split(message,\" \")[3]\n[END KQL]\n\n\n[INPUT]\nJun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 \nJun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown\nJun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 \nJun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\n\n[END INPUT]\n\n[KQL]"
                      }
                    ]
                  },
                  "output": {
                    "id": "chatcmpl-9K4AM7SvBUy6IPhmOgRCwpsRC34DX",
                    "choices": [
                      {
                        "finish_reason": "stop",
                        "index": 0,
                        "logprobs": null,
                        "message": {
                          "content": "datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]",
                          "role": "assistant",
                          "function_call": null,
                          "tool_calls": null
                        }
                      }
                    ],
                    "created": 1714569602,
                    "model": "gpt-4",
                    "object": "chat.completion",
                    "system_fingerprint": null,
                    "usage": {
                      "completion_tokens": 683,
                      "prompt_tokens": 933,
                      "total_tokens": 1616
                    }
                  },
                  "start_time": 1714569602.002535,
                  "end_time": 1714569651.154839,
                  "error": null,
                  "children": [],
                  "node_name": null,
                  "parent_id": "3583cb2c-78c7-4615-9718-8ae6edc9fcc3",
                  "id": "87d58d6d-93d0-4aff-a3b2-3a29d24911ca",
                  "function": "openai.resources.chat.completions.AsyncCompletions.create",
                  "system_metrics": {
                    "completion_tokens": 683,
                    "prompt_tokens": 933,
                    "total_tokens": 1616
                  }
                }
              ],
              "node_name": "logToKql",
              "parent_id": "",
              "id": "3583cb2c-78c7-4615-9718-8ae6edc9fcc3",
              "function": "kql_generator_tool",
              "system_metrics": {
                "completion_tokens": 776,
                "prompt_tokens": 1790,
                "total_tokens": 2566
              }
            }
          ],
          "system_metrics": {
            "duration": 62.78895,
            "prompt_tokens": 1790,
            "completion_tokens": 776,
            "total_tokens": 2566
          },
          "inputs": {
            "input_file": "./_data_in/apache.log"
          },
          "output": {
            "KQL": "datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]"
          },
          "error": null
        }
      ],
      "name": "",
      "description": "",
      "tags": null,
      "system_metrics": {
        "duration": 62.78895,
        "prompt_tokens": 1790,
        "completion_tokens": 776,
        "total_tokens": 2566
      },
      "result": {
        "KQL": "datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]"
      },
      "upload_metrics": false,
      "otel_trace_id": "0x4f34e495fcddb43300d062b3e2589831",
      "message_format": "basic"
    }
  ],
  "node_runs": [
    {
      "node": "logToKql",
      "flow_run_id": "03a9e5e5-c286-4a6b-96f1-51a5615f4a51",
      "run_id": "03a9e5e5-c286-4a6b-96f1-51a5615f4a51_logToKql_0",
      "status": "Completed",
      "inputs": {
        "input": "./_data_in/apache.log"
      },
      "output": "datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]",
      "metrics": null,
      "error": null,
      "parent_run_id": "03a9e5e5-c286-4a6b-96f1-51a5615f4a51_0",
      "start_time": "2024-05-01T13:19:48.373107Z",
      "end_time": "2024-05-01T13:20:51.158360Z",
      "index": 0,
      "api_calls": [
        {
          "name": "kql_generator_tool",
          "type": "Function",
          "inputs": {
            "input": "./_data_in/apache.log"
          },
          "output": "datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]",
          "start_time": 1714569588.373222,
          "end_time": 1714569651.157547,
          "error": null,
          "children": [
            {
              "name": "openai_chat_async",
              "type": "LLM",
              "inputs": {
                "model": "gpt-4",
                "frequency_penalty": 0.0,
                "logit_bias": {},
                "max_tokens": 1024,
                "n": 1,
                "presence_penalty": 0.0,
                "stream": false,
                "temperature": 0.0,
                "top_p": 0.0,
                "messages": [
                  {
                    "role": "user",
                    "content": "Create an XML plan step by step, to satisfy the goal given, with the available functions.\n\n[AVAILABLE FUNCTIONS]\n\nFileSystem-ReadFileHead:\n  description: Reads the first lines of a file\n  inputs:\n    - filename: The filename of the file to read\n\nextraction-extract_fields:\n  description: Create KQL that demonstrates extracting fields from a line in a logfile\n  inputs:\n    - input: \n\n[END AVAILABLE FUNCTIONS]\n\nTo create a plan, follow these steps:\n0. The plan should be as short as possible.\n1. From a <goal> create a <plan> as a series of <functions>.\n2. A plan has 'INPUT' available in context variables by default.\n3. Before using any function in a plan, check that it is present in the [AVAILABLE FUNCTIONS] list. If it is not, do not use it.\n4. Only use functions that are required for the given goal.\n5. Append an \"END\" XML comment at the end of the plan after the final closing </plan> tag.\n6. Always output valid XML that can be parsed by an XML parser.\n7. If a plan cannot be created with the [AVAILABLE FUNCTIONS], return <plan />.\n\nAll plans take the form of:\n<plan>\n    <!-- ... reason for taking step ... -->\n    <function.{FullyQualifiedFunctionName} ... />\n    <!-- ... reason for taking step ... -->\n    <function.{FullyQualifiedFunctionName} ... />\n    <!-- ... reason for taking step ... -->\n    <function.{FullyQualifiedFunctionName} ... />\n    (... etc ...)\n</plan>\n<!-- END -->\n\nTo call a function, follow these steps:\n1. A function has one or more named parameters and a single 'output' which are all strings. Parameter values should be xml escaped.\n2. To save an 'output' from a <function>, to pass into a future <function>, use <function.{FullyQualifiedFunctionName} ... setContextVariable=\"<UNIQUE_VARIABLE_KEY>\"/>\n3. To save an 'output' from a <function>, to return as part of a plan result, use <function.{FullyQualifiedFunctionName} ... appendToResult=\"RESULT__<UNIQUE_RESULT_KEY>\"/>\n4. Use a '$' to reference a context variable in a parameter, e.g. when `INPUT='world'` the parameter 'Hello $INPUT' will evaluate to `Hello world`.\n5. Functions do not have access to the context variables of other functions. Do not attempt to use context variables as arrays or objects. Instead, use available functions to extract specific elements or properties from context variables.\n\nDO NOT DO THIS, THE PARAMETER VALUE IS NOT XML ESCAPED:\n<function.Plugin-Name4 input=\"$SOME_PREVIOUS_OUTPUT\" parameter_name=\"some value with a <!-- 'comment' in it-->\"/>\n\nDO NOT DO THIS, THE PARAMETER VALUE IS ATTEMPTING TO USE A CONTEXT VARIABLE AS AN ARRAY/OBJECT:\n<function.Plugin-CallFunction input=\"$OTHER_OUTPUT[1]\"/>\n\nDO NOT DO THIS, THE FUNCTION NAME IS NOT A FULLY QUALIFIED FUNCTION NAME:\n<function.CallFunction input=\"world\"/>\n\nHere is a valid example of how to call a function \"_plugin-Function_Name\" with a single input and save its output:\n<function._plugin-Function_Name input=\"this is my input\" setContextVariable=\"SOME_KEY\"/>\n\nHere is a valid example of how to call a function \"Plugin-FunctionName2\" with a single input and return its output as part of the plan result:\n<function.Plugin-FunctionName2 input=\"Hello $INPUT\" appendToResult=\"RESULT__FINAL_ANSWER\"/>\n\nHere is a valid example of how to call a function \"Name3\" with multiple inputs:\n<function.Plugin-Name3 input=\"$SOME_PREVIOUS_OUTPUT\" parameter_name=\"some value with a &lt;!-- &apos;comment&apos; in it--&gt;\"/>\n\nBegin!\n\n<goal>Use the available plugins to: 1 - read the beginning of the log file and 2 - write a KQL query that extracts fields from the log: ./_data_in/apache.log</goal>"
                  }
                ]
              },
              "output": {
                "id": "chatcmpl-9K4A96Se6PBtcPOtsY9PJfACynH5o",
                "choices": [
                  {
                    "finish_reason": "stop",
                    "index": 0,
                    "logprobs": null,
                    "message": {
                      "content": "<plan>\n    <!-- First, we need to read the beginning of the log file -->\n    <function.FileSystem-ReadFileHead filename=\"./_data_in/apache.log\" setContextVariable=\"LOG_HEAD\"/>\n    <!-- Then, we use the extracted log head to create a KQL query that extracts fields from the log -->\n    <function.extraction-extract_fields input=\"$LOG_HEAD\" appendToResult=\"RESULT__KQL_QUERY\"/>\n</plan>\n<!-- END -->",
                      "role": "assistant",
                      "function_call": null,
                      "tool_calls": null
                    }
                  }
                ],
                "created": 1714569589,
                "model": "gpt-4",
                "object": "chat.completion",
                "system_fingerprint": null,
                "usage": {
                  "completion_tokens": 93,
                  "prompt_tokens": 857,
                  "total_tokens": 950
                }
              },
              "start_time": 1714569588.452641,
              "end_time": 1714569601.99684,
              "error": null,
              "children": [],
              "node_name": null,
              "parent_id": "3583cb2c-78c7-4615-9718-8ae6edc9fcc3",
              "id": "808eed75-27f4-4399-9f1c-fc21a14f298c",
              "function": "openai.resources.chat.completions.AsyncCompletions.create",
              "system_metrics": {
                "completion_tokens": 93,
                "prompt_tokens": 857,
                "total_tokens": 950
              }
            },
            {
              "name": "openai_chat_async",
              "type": "LLM",
              "inputs": {
                "model": "gpt-4",
                "frequency_penalty": 0.0,
                "logit_bias": {},
                "max_tokens": 2048,
                "n": 1,
                "presence_penalty": 0.0,
                "stream": false,
                "temperature": 0.0,
                "top_p": 0.0,
                "messages": [
                  {
                    "role": "user",
                    "content": "Write a Kusto Query Language (KQL) query that extracts all the fields from the loglines below. \n\nFields could be:\n- IP Address e.g. 127.0.2.200\n- Date e.g. 'Jun 14 15:16:02'\n- Message e.g. 'authentication failure' or 'check pass; user unknown'\n- Response code e.g. 200 or 404\n\n\nRelevant KQL functions syntax:\n- Joining strings (concatenation): strcat(argument1, argument2 [, argument3 ... ])\n- Datetime parsing: todatetime(value)\n- Splitting strings: split(source, delimiter [, requestedIndex])\n\nDo NOT:\n- Name columns any of the following 'date', 'time'\n\n\nExample:\n\n[INPUT]\n127.0.0.1 200 GET /index.htm\n127.0.0.1 200 GET /index.htm\n127.0.0.1 200 GET /index.htm\n127.0.0.1 200 GET /index.htm\n[END INPUT]\n\n[KQL]\ndatatable (message:string) [\n    '127.0.0.1 200 GET /index.htm',\n    '127.0.0.1 200 GET /index.htm',\n    '127.0.0.1 200 GET /index.htm',\n    '127.0.0.1 200 GET /index.htm',\n]\n| project \n    ip = split(message,\" \")[0],\n    httpResultCode = split(message,\" \")[1],\n    httpMethod = split(message,\" \")[2] ,\n    doc = split(message,\" \")[3]\n[END KQL]\n\n\n[INPUT]\nJun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 \nJun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown\nJun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4 \nJun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\nJun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root\n\n[END INPUT]\n\n[KQL]"
                  }
                ]
              },
              "output": {
                "id": "chatcmpl-9K4AM7SvBUy6IPhmOgRCwpsRC34DX",
                "choices": [
                  {
                    "finish_reason": "stop",
                    "index": 0,
                    "logprobs": null,
                    "message": {
                      "content": "datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]",
                      "role": "assistant",
                      "function_call": null,
                      "tool_calls": null
                    }
                  }
                ],
                "created": 1714569602,
                "model": "gpt-4",
                "object": "chat.completion",
                "system_fingerprint": null,
                "usage": {
                  "completion_tokens": 683,
                  "prompt_tokens": 933,
                  "total_tokens": 1616
                }
              },
              "start_time": 1714569602.002535,
              "end_time": 1714569651.154839,
              "error": null,
              "children": [],
              "node_name": null,
              "parent_id": "3583cb2c-78c7-4615-9718-8ae6edc9fcc3",
              "id": "87d58d6d-93d0-4aff-a3b2-3a29d24911ca",
              "function": "openai.resources.chat.completions.AsyncCompletions.create",
              "system_metrics": {
                "completion_tokens": 683,
                "prompt_tokens": 933,
                "total_tokens": 1616
              }
            }
          ],
          "node_name": "logToKql",
          "parent_id": "",
          "id": "3583cb2c-78c7-4615-9718-8ae6edc9fcc3",
          "function": "kql_generator_tool",
          "system_metrics": {
            "completion_tokens": 776,
            "prompt_tokens": 1790,
            "total_tokens": 2566
          }
        }
      ],
      "cached_run_id": null,
      "cached_flow_run_id": null,
      "logs": {
        "stdout": "[2024-05-01T13:20:51+0000] Function: FileSystem.ReadFileHead\n[2024-05-01T13:20:51+0000] Input vars: {'filename': './_data_in/apache.log'}\n[2024-05-01T13:20:51+0000] Output vars: ['LOG_HEAD']\n[2024-05-01T13:20:51+0000] Function: extraction.extract_fields\n[2024-05-01T13:20:51+0000] Input vars: {'input': '$LOG_HEAD'}\n[2024-05-01T13:20:51+0000] Output vars: ['RESULT__KQL_QUERY']\n[2024-05-01T13:20:51+0000] Result: datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]\n",
        "stderr": ""
      },
      "system_metrics": {
        "completion_tokens": 776,
        "prompt_tokens": 1790,
        "total_tokens": 2566,
        "duration": 62.785253
      },
      "result": "datatable (message:string) [\n    'Jun 14 2024 15:16:01 combo sshd(pam_unix)[19939]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: check pass; user unknown',\n    'Jun 14 2024 15:16:02 combo sshd(pam_unix)[19937]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=218.188.2.4',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20882]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20884]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20883]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20885]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20886]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20892]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root',\n    'Jun 15 2024 02:04:59 combo sshd(pam_unix)[20893]: authentication failure; logname= uid=0 euid=0 tty=NODEVssh ruser= rhost=220-135-151-1.hinet-ip.hinet.net  user=root'\n]\n| project \n    logDate = todatetime(strcat(split(message,\" \")[0], \" \", split(message,\" \")[1], \" \", split(message,\" \")[2], \" \", split(message,\" \")[3])),\n    ipAddress = split(split(message,\" \")[12], \"=\")[1],\n    logMessage = strcat(split(message,\" \")[5], \" \", split(message,\" \")[6])\n[END KQL]",
      "message_format": "basic"
    }
  ]
}